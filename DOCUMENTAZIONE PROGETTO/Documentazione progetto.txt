DOCUMENTAZIONE PROGETTO


AVVIO

Fare partire il progetto spring boot e una volta che è stato fatto partire il progetto in angular mettere le credenziali per accedere. Ogni dipendente ha le proprie credenziali con password e email conservate bnel DB (si puo utilizzare email: giuseppe.ferrara@email.com, password: gife1). Cliccando sulle categorie spunteranno i prodotti relativi a una categoria e cliccando sui prodotti spunteranno i movimenti relativi a ciascun prodotto. Nella sezione Add si potranno aggiungere o aggiornare categorie e prodotti. Nella sezione Report si potranno visualizzare dei report sui prodotti e nella sezione Employees si potranno visualizzare tutti i dipendenti dell'azienda.

DB
Su sql developer ho creato quattro tabelle: ferrara_category, ferrara_employees, ferrara_products, ferrara_movements.
La tabella ferrara_category ha come colonne: "id_category" che è la chiave primaria e che è un identificativo della tabella e "name" che ci fornisce il nome della categoria. La tabella ferrara_employees ha come colonne: "id_employee" che è la chiave primaria e che è un identificativo della tabella, "name" che ci fornisce il nome dell'impiegato, "email" dove conserviamo l'email dell'impiegato che ci servirà per il login, "role" che è il ruolo dell'impiegato nell'azienda e "password" che useremo dopo per il login. La tabella ferrara_products ha come colonne: "id_product" che è la chiave primaria e che è un identificativo della tabella, "name" che ci fornisce il nome del prodotto, "description" dove abbiamo una descrizione del prodotto, "id_category" che è la colonna tramite la quale la tabella ferrara_products va in join con la tabella ferrara_category, "quantity" che ci fornisce la quantità di ogni prodotto e "price" che ci fornisce il prezzo di ogni prodotto. La tabella ferrara_movement ha come colonne: "id_movement" che è la chiave primaria e che è un identificativo della tabella, "id_product" che è la colonna tramite la quale la tabella ferrara_movements va in join con la tabella ferrara_product, "quantity_canghe" che ci fornisce la nuova quantità del prodotto depo un movimento, "timestamp" che ci ritorna la data e l'ora esatta del movimento, "type" che ci ritorna il tipo di movimento che è stato effettuato. Dopo aver creato le tabelle le ho popolate con delle insert.

BE

Ho creato un progetto spring boot in cui ho aggiunto tutte le dipendenze necessarie e successivamente ho effettuato tutte le operazioni CRUD per tutte e quattro le tabelle. Nel package Models ho inserito tutti e quattro i miei model che sono(products, category, employees, movement). Gli attributi di questi model sono le colonne di ogni tabella creata su SQL. Nel package Repositories ho fatto un repository(interfaccia) per ogni model. Tutti i repository estendono JpaRepository. Nel package services ho un interfaccia per ogni mio model con la dichiarazione di tutti i metodi che successivamente andrò ad implementare nelle classi ill'interno del package "impl". Nelle classi in cui implemento i metodi delle interfacce service inietto tramite l'annotation @Autowired il repository che si riferisce a quel modello in modo da poter utilizzare tutti i metodi che ci mette a disposizione JpaRepository. Nel package controllers ho un controller per ogni model. In ogni controller inietto tramite l'annotation @Autowired il serviceImpl che si riferisce a quel modello in modo da poter utilizzare tutti i metodi al suo interno. Nei controller i metodi di get saranno annotati con @GetMapping, i metodi di post con @PostMapping, i metodi di put con @PutMapping, i metodi di delete con @DeleteMapping. Ho dovuto creare anche dei metodi che mi sono serviti successivamente che vado a crare nel repository e successivamente vado a implementare nel serviceImpl e poi nel controller.

FE

In angular ho un componente che permette di effettuare il login ai miei dipendenti. Tramite l'email mi recupero il dipendente e successivamente controllo se la passwors che inserisco è uguale a quella che ho nel mio DB. Se il responso è okay faccio in modo di andare nella mia pagina Home che è il Componente CategoryComponent in cui vado a recuperare le mie category che ho nel DB(recupero dal service attraverso gli osservable e successivamente inietto il service nel mio componente e vado a utilizzare il metodo).
Cliccando su una categoria mi sposto sul componente ProductsComponent in cui verranno mostarti soli i prodotti relativi alla categoria cliccata e cliccando su un determinato prodotto mi spostero nel componente MovementComponent in cui verranno mostrati solo i movimenti relativi a quel prodotto. Nella sezione add (AddAndUpdateComponent) a cui posso accedere tramite click sull'item presente nell'header ho creato due form in cui ho la possibilità di aggiungere o aggiornare un prodotto o una categoria. Nella sezione Report(ReportProductsComponent) ho utilizzato la libreria ChartJS per creare dei report. Il primo report ci mostra la categoria di ogni prodotto, il secondo report riporta la quantità di ogni prodotto in magazzino e il terzo report ci mostra la variazione di quantità dei ogni prodotto nel tempo dopo aver effettuato un movimento. Nella sezione Employees(EmployeesComponent) mi vado a recuperare la lista dei dipendenti. 

p.s. i numeri che sono presenti nelle categorie(in alto a sinistra) e nei prodotti(in alto a destra) sono i rispettivi id di categoria e prodotto e serviranno per andare a fare laggiornamento.